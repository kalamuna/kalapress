/* @theme palette
 *
 * !!! Only use the SCSS variables below in SCSS functions to avoid compile error. 
 * Other than that those are just for references. Please use the CSS color variables
 * referenced in theme.json and :root instead.
 */

/*
 * Brand Theme Colors ================================================
 *
 * These should match the colors in theme.json.
 */
$brand-base: #fff; // Background
$brand-contrast: #191919; // Text Color
$brand-primary: #CE3C90; 
$brand-secondary: #323334; 
$brand-tertiary: #FD81C3;
$brand-quartary: #D55A50; 
$brand-quinary: #C3A3FF; 
$brand-senary: #737487; 

/* Greyscale Color */
$grey: #929292;

/* Descriptive Colors */
$debug-red: rgb(160, 0, 0);
$debug-yellow: #FFD424;
$debug-green: rgb(0, 160, 0);
$debug-blue: rgb(0, 0, 160);

/* CSS Color variables ================================================
 *
 * For instance, to use color $brand-primary, use var(primary-**) variations below instead.
 */
:root {

// Primary palette  ====================================================

  --color-base: #{$brand-base};
  --color-contrast: #{$brand-contrast};
  --color-primary: #{$brand-primary};
  
  /* Primary */
  @for $i from 0 through 10 {
    $color: $brand-primary;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-primary-#{if($i == 0, '00', $i * 10)}: #{$val};
  }
  
  --color-secondary: #{$brand-secondary};

  /* Secondary */
  @for $i from 0 through 10 {
    $color: $brand-secondary;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-secondary-#{if($i == 0, '00', $i * 10)}: #{$val};
  }

  --color-tertiary: #{$brand-tertiary};
  --color-quartary: #{$brand-quartary};
  --color-quinary:  #{$brand-quinary};
  --color-senary:   #{$brand-senary};


// @accent colors palette ================================================

  /* Debug red */
  --color-debug-red: #{$debug-red};

  @for $i from 0 through 10 {
    $color: $debug-red;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-debug-red-#{if($i == 0, '00', $i * 10)}: #{$val};
  }

  /* Debug yellow */
  --color-debug-yellow: #{$debug-yellow};

  @for $i from 0 through 10 {
    $color: $debug-yellow;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-debug-yellow-#{if($i == 0, '00', $i * 10)}: #{$val};
  }
  
  /* Debug green */
  --color-debug-green: #{$debug-green};

  @for $i from 0 through 10 {
    $color: $debug-green;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-debug-green-#{if($i == 0, '00', $i * 10)}: #{$val};
  }

  /* Debug blue */
  --color-debug-blue: #{$debug-blue};

  @for $i from 0 through 10 {
    $color: $debug-blue;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-debug-blue-#{if($i == 0, '00', $i * 10)}: #{$val};
  }

// @greyscale palette  ===================================================
  
  @for $i from 0 through 10 {
    $color: $grey;
    /* generate colors from light to dark. */
    $val: if($i == 5, $color, if($i < 5, lighten($color, abs($i - 5) * 10%), darken($color, ($i - 5) * 10%)));
    
    /* assign values from 00 to 100 */
    --color-grey-#{if($i == 0, '00', $i * 10)}: #{$val};
  }
}

// Helper function to support a simple function name for fetching colors based on name or usage. color(grey-00);
@function color($name) {
  @return var(--color-#{$name});
}
